# Copyright 2019 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

check_services_status: &check_services_status
  command: |
    set -x

    sleep 10  # Give the services enough time to start (or fail)

    for c in as1301 as1303 as1305; do
      docker-compose exec $c /bin/bash -c \
        '! systemctl is-failed scion-* || (systemctl status scion-* --no-pager --full && false)'
    done

check_scion_connections: &check_scion_connections
  command: |
    set -x

    # Wait for 3 beacons received from now on
    docker-compose exec -T as1303 /bin/bash -c \
      "tail -n 0 -f /var/log/scion/* | awk '/Registered beacons/ {c++; if(c>=3) exit(0)}'"
    docker-compose exec -T as1305 /bin/bash -c \
      "tail -n 0 -f /var/log/scion/* | awk '/Registered beacons/ {c++; if(c>=3) exit(0)}'"

    # Show paths used by SCMP
    docker-compose exec -T as1301 /bin/bash -c \
      'showpaths -dstIA 19-ffaa:0:1303 || true'
    docker-compose exec -T as1303 /bin/bash -c \
      'showpaths -dstIA 19-ffaa:0:1301 || true'
    docker-compose exec -T as1305 /bin/bash -c \
      'showpaths -dstIA 19-ffaa:0:1301 || true'

    # Check that we can SCMP
    docker-compose exec -T as1301 /bin/bash -c \
      'scmp echo -c 5 -remote 19-ffaa:0:1303,[127.0.0.1]'
    docker-compose exec -T as1303 /bin/bash -c \
      'scmp echo -c 5 -remote 19-ffaa:0:1301,[127.0.0.1]'
    docker-compose exec -T as1305 /bin/bash -c \
      'scmp echo -c 5 -remote 19-ffaa:0:1301,[127.0.0.1]'

start_coordinator: &start_coordinator
  command: |
    # Initialize coordinator with test data and test keys
    docker-compose run -T coord /bin/bash -c \
     './scripts/init-test-db.sh && \
      cp .circleci/setup/deploy_ssh_config run/ssh_config && \
      cp .circleci/setup/deploy_rsa* run/ && \
      chmod 644 run/deploy_rsa.pub && \
      chmod 600 run/deploy_rsa'

    docker-compose up -d coord

check_coordinator_ready: &check_coordinator_ready
  command: |
    # We start another container in the same network as `coord` to check `coord` is ready.
    # All exposed ports from `coord` are available on `localhost` in this new container.
    # NOTE: uses python:3.6 to re-use already fetched image from `coord`; contains more tools than ubuntu:xenial
    docker run --net circleci_as_net --entrypoint /bin/bash python:3.6 -c \
      'wget --tries 10 --retry-connrefused http://coord:8000/login/'

jobs:
  basic:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v4-dependencies-

      - run:
          name: Install dependencies
          command: |
            python3 -m venv /tmp/venv 2>&1
            . /tmp/venv/bin/activate
            pip install --require-hashes -r requirements.txt -r dev-requirements.txt
      - save_cache:
          paths:
            - /tmp/venv
          key: v4-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}

      # run flake8
      - run:
          name: Run flake8 style checker
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/flake8/
            flake8 --config=flake8.ini --format junit-xml --output-file=test-reports/flake8/results.xml

      # run Django's tests (using nose as the test runner)
      - run:
          name: Run tests
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/django/
            python manage.py test --with-xunit --xunit-file=test-reports/django/results.xml
          when: always

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports
          destination: test-reports

  integration:
    machine:
      image: ubuntu-1604:201903-01
      # This is super nice and works like a charm BUT unfortunately it is now explicitly disabled on the free plan. Pitty
      # docker_layer_caching: true

    steps:
      - checkout

      - run:
          name: Extract host configuration info from testdata.yaml fixture
          command: |
            pip install pyyaml
            python .circleci/setup/generate-host-envs.py

      - run:
          name: Build container images
          working_directory: ~/project/.circleci
          command: |
            sed -i '/.circleci/d' ~/project/.dockerignore  # The .dockerignore is for production, we'll need this
            docker build --file ~/project/deploy/Dockerfile-django --tag scionlab_django ~/project/ # Build base image, as used in production
            docker-compose build

      - run:
          name: Start coordinator
          working_directory: ~/project/.circleci
          <<: *start_coordinator

      - run:
          name: Check coordinator ready
          working_directory: ~/project/.circleci
          <<: *check_coordinator_ready

      # Start integration tests
      - run:
          name: Start ASes in containers
          working_directory: ~/project/.circleci
          command: |
            set -x
            docker-compose up -d as1301 as1303 as1305

            for c in as1301 as1303 as1305; do
              docker-compose exec $c /bin/bash -c \
                'scionlab-config --host-id ${SCIONLAB_HOST_ID} --host-secret ${SCIONLAB_HOST_SECRET} --url http://coord:8000'
            done

            docker-compose logs

      - run:
          name: Check AS services status
          working_directory: ~/project/.circleci
          <<: *check_services_status

      - run:
          name: Check SCION connections
          working_directory: ~/project/.circleci
          no_output_time: "3m0s"
          <<: *check_scion_connections

      - run:
          name: "Push changes to AS ffaa:0:1303"
          working_directory: ~/project/.circleci
          no_output_time: "1m0s"
          command: |
            set -x

            prev_version=$(docker-compose exec -T as1303 cat /etc/scion/gen/scionlab-config.json | jq .version)

            # Start the huey worker
            docker-compose up -d huey

            # Generate new AS-keys for 1303 and push the new configuration.
            # This waits until the configuration has been deployed.
            docker-compose exec -T coord /bin/bash -c \
             'python .circleci/actions/update-keys.py ffaa:0:1303; \
              python .circleci/actions/push-deploy.py ffaa:0:1303'

            docker-compose logs huey

            # Check that
            # i) configuration was deployed
            new_version=$(docker-compose exec -T as1303 cat /etc/scion/gen/scionlab-config.json | jq .version)
            [ "$prev_version" -lt "$new_version" ]
            # ii) connection still works
            docker-compose exec -T as1303 /bin/bash -c \
              'scmp echo -c 5 -remote 19-ffaa:0:1301,[127.0.0.1]'

      - run:
          name: Test TRC update and push changes
          working_directory: ~/project/.circleci
          command: |
            set -x

            # Show current TRC
            TRC_version=1
            docker-compose exec -T as1301 scion-pki trcs human "/etc/scion/gen/ISD19/trcs/ISD19-V${TRC_version}.trc"

            # Update core keys which requires creating a new TRC
            docker-compose exec -T coord /bin/bash -c \
             'python .circleci/actions/update-keys.py --core-keys ffaa:0:1301;
              python .circleci/actions/push-deploy.py ffaa:0:1301 ffaa:0:1303 ffaa:0:1305'

            docker-compose logs huey
            docker-compose logs coord

            # Check updated TRC and check that updated TRCs were installed on all hosts
            TRC_version=$((TRC_version + 1))
            docker-compose exec -T as1301 scion-pki trcs human "/etc/scion/gen/ISD19/trcs/ISD19-V${TRC_version}.trc"
            docker-compose exec -T as1301 scion-pki trcs verify -d "/etc/scion/gen/" "/etc/scion/gen/ISD19/trcs/ISD19-V${TRC_version}.trc"

            docker-compose exec -T as1303 stat -t "/etc/scion/gen/ISD19/trcs/ISD19-V${TRC_version}.trc"
            docker-compose exec -T as1305 stat -t "/etc/scion/gen/ISD19/trcs/ISD19-V${TRC_version}.trc"

            # Check that infra still works
            sleep 30 # wait for paths to register, see `Check SCION connections` for an active wait
            docker-compose exec -T as1301 /bin/bash -c \
              'scmp echo -c 5 -remote 19-ffaa:0:1303,[127.0.0.1]'
            docker-compose exec -T as1303 /bin/bash -c \
              'scmp echo -c 5 -remote 19-ffaa:0:1301,[127.0.0.1]'
            docker-compose exec -T as1305 /bin/bash -c \
              'scmp echo -c 5 -remote 19-ffaa:0:1301,[127.0.0.1]'

      - run:
          name: Start VPN containers and verify the connection over VPN works
          working_directory: ~/project/.circleci
          command: |
            set -x
            echo "Start containers required for VPN AP and verify they are working"
            docker-compose up -d as1401 as1405

            for c in as1401 as1405; do
              docker-compose exec $c /bin/bash -c \
                'scionlab-config --host-id ${SCIONLAB_HOST_ID} --host-secret ${SCIONLAB_HOST_SECRET} --url http://coord:8000'
              docker-compose logs $c
            done

            docker-compose up -d useras4
            docker-compose exec useras4 /bin/bash -c \
              'scionlab-config --host-id ${SCIONLAB_HOST_ID} --host-secret ${SCIONLAB_HOST_SECRET} --url http://coord:8000'
            docker-compose logs useras4

            # Wait for client to be setup
            echo "Waiting for beaconing before starting VPN client SCMPs"
            docker-compose exec useras4 /bin/bash -c \
             'until [ `grep "Registered beacons" -s -r /var/log/scion/ | wc -l` -ge 5 ]; do sleep 0.1; done; \
              scmp echo -c 5 -remote 20-ffaa:0:1405,[127.0.0.1]'

  upgrade_integration:
    machine:
      image: ubuntu-1604:201903-01

    steps:
      # Start old version of coordinator
      - run:
          name: OLD -- Checkout
          working_directory: ~/
          command: |
            git clone https://github.com/netsec-ethz/scionlab.git -b master ~/previous_version

      - run:
          name: OLD -- Extract host configuration info from testdata.yaml fixture
          working_directory: ~/previous_version
          command: |
            pip install pyyaml
            python .circleci/setup/generate-host-envs.py

      - run:
          name: OLD -- Build container images
          working_directory: ~/previous_version/.circleci
          command: |
            #docker build --file ~/project/previous_version/deploy/Dockerfile-django --tag scionlab_django ~/project/ # We are only extending the production image
            sed -i '/.circleci/d' ~/previous_version/.dockerignore  # The .dockerignore is for production, we'll need this
            docker-compose build


      - run:
          name: OLD -- Start coordinator
          working_directory: ~/previous_version/.circleci
          <<: *start_coordinator

      - run:
          name: OLD -- Check coordinator ready
          working_directory: ~/previous_version/.circleci
          <<: *check_coordinator_ready

      - run:
          name: OLD -- Start ASes
          working_directory: ~/previous_version/.circleci
          command: |
            set -x
            docker-compose up -d as1301 as1303 as1305

            for c in as1301 as1303 as1305; do
              docker-compose exec $c /bin/bash -c \
                'apt-get install --assume-yes scionlab; \
                 scionlab-config --host-id ${SCIONLAB_HOST_ID} --host-secret ${SCIONLAB_HOST_SECRET} --url http://coord:8000'
            done

            docker-compose logs

      - run:
          name: OLD -- Check AS services status
          working_directory: ~/previous_version/.circleci
          <<: *check_services_status

      - run:
          name: OLD -- Start VPN containers and verify the connection over VPN works
          working_directory: ~/previous_version/.circleci
          command: |
            set -x
            echo "Start containers required for VPN AP and verify they are working"
            docker-compose up -d as1401 as1405

            for c in as1401 as1405; do
              docker-compose exec $c /bin/bash -c \
                'scionlab-config --host-id ${SCIONLAB_HOST_ID} --host-secret ${SCIONLAB_HOST_SECRET} --url http://coord:8000'
              docker-compose logs $c
            done

            docker-compose up -d useras4
            docker-compose exec useras4 /bin/bash -c \
              'scionlab-config --host-id ${SCIONLAB_HOST_ID} --host-secret ${SCIONLAB_HOST_SECRET} --url http://coord:8000'
            docker-compose logs useras4

            # Wait for client to be setup
            echo "Waiting for beaconing before starting VPN client SCMPs"
            docker-compose exec -T useras4 /bin/bash -c \
              "sleep 10; tail -n 0 -f /var/log/scion/* | awk '/Registered beacons/ {c++; if(c>=3) exit(0)}'"
            docker-compose exec useras4 /bin/bash -c \
              'scmp echo -c 5 -local 20-ffaa:1:4,[127.0.0.1] -remote 20-ffaa:0:1405,[127.0.0.1]'

      # Starting upgrade integration tests

      - checkout

      - run:
          name: NEW -- Rebuild and start coordinator from current branch
          working_directory: ~/project/.circleci
          command: |
            sed -i '/.circleci/d' ~/project/.dockerignore  # The .dockerignore is for production, we'll need this
            docker build --file ~/project/deploy/Dockerfile-django --tag scionlab_django ~/project/
            sudo chown circleci:circleci -R ~/previous_version/run/
            cp -r ~/previous_version/run ~/project/
            docker-compose up -d --force-recreate --build coord huey

      - run:
          name: NEW -- Check coordinator ready
          working_directory: ~/project/.circleci
          <<: *check_coordinator_ready

      - run:
          name: OLD -- Run client cronjob
          working_directory: ~/previous_version/.circleci
          command: |
            set -x
            # Simulate command that is executed on hosts with upgrade cronjob (VMs), upgrade package
            for c in as1301 as1303 as1305 as1401 as1405 useras4; do
              # We have to hide the /.dockerenv file, since the scionlab packages assume that they cannot use systemd, run systemctl when run in docker
              docker-compose exec -T $c /bin/bash -c \
                'echo "deb [trusted=yes] https://packages-test.netsec.inf.ethz.ch/debian all main" | sudo tee /etc/apt/sources.list.d/scionlab.list; \
                 apt-get update; \
                 sudo mv /.dockerenv /.dockerenv.bk; \
                 DEBIAN_FRONTEND=noninteractive apt-get install -y --only-upgrade scionlab; \
                 sudo mv /.dockerenv.bk /.dockerenv;'
            done

      - run:
          name: NEW -- Check updated AS services status
          working_directory: ~/project/.circleci
          <<: *check_services_status

      - run:
          name: NEW -- Check SCION connections
          working_directory: ~/project/.circleci
          no_output_time: "3m0s"
          <<: *check_scion_connections

      - run:
          name: NEW -- Check updated configuration matches VPN setup
          working_directory: ~/project/.circleci
          command: |
            # Check configuration on AP
            echo "Server AP 1405 new VPN configuration"
            docker cp ./setup/check_tun0_in_topo.py $(docker-compose ps -q as1405):/home/scionlab/
            docker-compose exec -T as1405 /bin/bash -c \
              "apt-get install -y jq > /dev/null 2>&1; "\
              "jq .BorderRouters[].Interfaces /etc/scion/gen/ISD20/ASffaa_0_1405/endhost/topology.json; "\
              "ip address show tun0; "\
              "python3 /home/scionlab/check_tun0_in_topo.py /etc/scion/gen/ISD20/ASffaa_0_1405/endhost/topology.json"
            # Check configuration on client
            echo "Client AS4 new VPN configuration"
            docker cp ./setup/check_tun0_in_topo.py $(docker-compose ps -q useras4):/home/scionlab/
            docker-compose exec -T useras4 /bin/bash -c \
              "apt-get install -y jq > /dev/null 2>&1; "\
              "jq .BorderRouters[].Interfaces /etc/scion/gen/ISD20/ASffaa_1_4/endhost/topology.json; "\
              "ip address show tun0; "\
              "python3 /home/scionlab/check_tun0_in_topo.py /etc/scion/gen/ISD20/ASffaa_1_4/endhost/topology.json"

      - run:
          name: NEW -- Check CA and server VPN certificates on server and client
          working_directory: ~/project/.circleci
          command: |
            # Check that the CA certificate on the AP expires later than two years from now
            docker-compose exec -T as1405 /bin/bash -c \
              "awk '/^<ca>$/,/^<\/ca>$/' /etc/openvpn/server.conf | \
               openssl x509 -text -checkend $(( 60 * 60 * 24 * 365 * 2 )) -in - | tail -n 1 | grep 'will not expire'"
            # Check that the server certificate on the AP expires later than a year from now
            docker-compose exec -T as1405 /bin/bash -c \
              "awk '/^<cert>$/,/^<\/cert>$/' /etc/openvpn/server.conf | \
               openssl x509 -text -checkend $(( 60 * 60 * 24 * 365 * 1 )) -in - | tail -n 1 | grep 'will not expire'"
            # Check that the CA certificate on the user AS expires later than two years from now
            docker-compose exec -T useras4 /bin/bash -c \
              "awk '/^<ca>$/,/^<\/ca>$/' /etc/openvpn/client-scionlab-20-ffaa_0_1405.conf | \
               openssl x509 -text -checkend $(( 60 * 60 * 24 * 365 * 2 )) -in - | tail -n 1 | grep 'will not expire'"
            # Check that the server certificate on the user AS expires later than a year from now
            docker-compose exec -T useras4 /bin/bash -c \
              "awk '/^<cert>$/,/^<\/cert>$/' /etc/openvpn/client-scionlab-20-ffaa_0_1405.conf | \
               openssl x509 -text -checkend $(( 60 * 60 * 24 * 365 * 1 )) -in - | tail -n 1 | grep 'will not expire'"

      - run:
          name: NEW -- Check SCION connections over VPN works
          working_directory: ~/project/.circleci
          command: |
            # Add a "retry", restart the scionlab target if the tun interface did not come up in time
            docker-compose exec -T useras4 /bin/bash -c \
              "bash -c 'sleep 300 && systemctl restart scionlab.target' &"
            # Wait for client to be setup
            echo "Waiting for beaconing before starting VPN client SCMPs"
            docker-compose exec -T useras4 /bin/bash -c \
              "sleep 10; tail -n 0 -f /var/log/scion/* | awk '/Registered beacons/ {c++; if(c>=3) exit(0)}'"
            docker-compose exec useras4 /bin/bash -c \
             'scmp echo -c 5 -remote 20-ffaa:0:1405,[127.0.0.1]'

workflows:
  version: 2
  tests:
    jobs:
      - basic
      - integration
      - upgrade_integration:
          filters:
            branches:
              only: /.*_upgrade_.*/
