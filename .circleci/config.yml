# Copyright 2019 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:

  install_git_lfs:
    steps:
    - run:
        name: Install git LFS
        command: |
          # circleci images don't currently come with git lfs installed:
          #   https://support.circleci.com/hc/en-us/articles/360044671191-git-lfs-support-on-CircleCI-provided-images
          # Install it manually, as suggested.
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
          sudo apt-get install git-lfs
          git lfs install

  cached_checkout:
    steps:
      - restore_cache:
          keys:
          - source-v1-{{ .Branch }}-{{ .Revision }}
          - source-v1-{{ .Branch }}-
          - source-v1-
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"


  cached_pip_deps:
    steps:
      - restore_cache:
          keys:
          - v4-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v4-dependencies-

      - run:
          name: Install dependencies
          command: |
            python3 -m venv /tmp/venv 2>&1
            . /tmp/venv/bin/activate
            pip install --require-hashes -r requirements.txt -r dev-requirements.txt

      - save_cache:
          paths:
            - /tmp/venv
          key: v4-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}


jobs:
  style-check:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - install_git_lfs
      - cached_checkout
      - cached_pip_deps
      - run:
          name: Run flake8 style checker
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/flake8/
            flake8 --format junit-xml --output-file=test-reports/flake8/results.xml
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports

  unit-tests:
    docker:
      - image: circleci/python:3.6.1
    steps:
      - install_git_lfs
      - cached_checkout
      - cached_pip_deps
      - run:
          name: Run tests
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/django/
            python manage.py test --with-xunit --xunit-file=test-reports/django/results.xml
          when: always
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports

  integration-tests:
    machine:
      image: ubuntu-1604:201903-01
      # This is super nice and works like a charm BUT unfortunately it is now explicitly disabled on the free plan. Pitty
      # docker_layer_caching: true
    environment:
      COMPOSE_FILE: ".circleci/docker-compose.yml"
    steps:
      - install_git_lfs

      - cached_checkout

      - run:
          name: Build and start containers for coordinator and ASes
          command: |
            set -x
            pip install pyyaml

            .circleci/setup/build-containers.sh --build-arg package_repo=packages-test.netsec.inf.ethz.ch
            docker-compose up -d
            .circleci/setup/init-coord.sh
            .circleci/setup/init-ases.sh

      - run: .circleci/setup/check-scion-connectivity.sh

      - run:
          name: "Pull changes to AS ffaa:0:1303"
          command: |
            set -x

            prev_version=$(docker-compose exec -T as1303 cat /etc/scion/scionlab-config.json | jq .version)

            # Generate new AS-keys for 1303 and pull the new configuration.
            docker-compose exec -T coord python .circleci/actions/update-keys.py ffaa:0:1303
            docker-compose exec -T as1303 scionlab-config

            # Check that configuration was updated
            new_version=$(docker-compose exec -T as1303 cat /etc/scion/scionlab-config.json | jq .version)
            [ "$prev_version" -lt "$new_version" ]

      - run: .circleci/setup/check-scion-connectivity.sh

      - run:
          name: Test TRC update and pull changes
          command: |
            set -x

            # Show current TRC
            TRC_version=1
            docker-compose exec -T --user user as1301 scion-pki trcs human "/etc/scion/certs/ISD19-B1-S${TRC_version}.trc"

            # Update core keys which requires creating a new TRC
            docker-compose exec -T coord python .circleci/actions/update-keys.py --core-keys ffaa:0:1301

            for c in as1301 as1303 as1305; do
              docker-compose exec -T $c scionlab-config
            done

            # Check updated TRC and check that updated TRCs were installed on all hosts
            TRC_version=$((TRC_version + 1))
            for c in as1301 as1303 as1305; do
              docker-compose exec -T $c stat -t "/etc/scion/certs/ISD19-B1-S${TRC_version}.trc"
            done
            docker-compose exec --user user -T as1301 \
              scion-pki trcs verify --anchor `seq -f "/etc/scion/certs/ISD19-B1-S%.0f.trc" 1 $TRC_version`

      - run: .circleci/setup/check-scion-connectivity.sh

      - run:
          command: .circleci/setup/export-logs.sh
          when: always

      - store_artifacts:
          path: logs
          destination: logs


  upgrade-tests:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      COMPOSE_FILE: ".circleci/docker-compose.yml"
    steps:
      - install_git_lfs
      - cached_checkout
      - run:
          name: OLD -- Checkout
          command: git checkout master
      - run:
          name: OLD -- Build and start containers for coordinator and ASes
          command: |
            set -x
            pip install pyyaml

            .circleci/setup/build-containers.sh --build-arg package_repo=packages.netsec.inf.ethz.ch # start with released packages
            docker-compose up -d
            .circleci/setup/init-coord.sh
            .circleci/setup/init-ases.sh

      - run: .circleci/setup/check-scion-connectivity.sh

      # Starting upgrade integration tests
      - checkout:
          name: NEW -- Checkout

      - run:
          name: NEW -- Rebuild and start coordinator from current branch
          command: |
            sed -i '/.circleci/d' ~/project/.dockerignore  # The .dockerignore is for production, we'll need this
            docker-compose up -d --force-recreate --build coord
            docker-compose exec -T coord appdeps.py --interval-secs 1 --wait-secs 60 --port-wait coord:8000

      - run: .circleci/setup/package-upgrade.sh

      - run: .circleci/setup/check-scion-connectivity.sh

      - run:
          command: .circleci/setup/export-logs.sh
          when: always

      - store_artifacts:
          path: logs
          destination: logs

  production-stack-tests:
    machine: true
    environment:
      COMPOSE_FILE: "docker-compose.yml:.circleci/docker-compose.test-prod-db.yaml"
    steps:
      - checkout

      - run:
          name: Start stack
          command: |
            ln -rs .circleci/test-prod.env run/scionlab.env
            docker-compose up --build -d

      - run:
          name: Load data from fixture to check (test) DB setup
          command: |
            # wait a bit for the migrations in the django-entrypoint.sh are done.
            docker-compose exec -T django appdeps.py --interval-secs 1 --wait-secs 60 --port-wait django:8000
            docker-compose exec -T django ./manage.py loaddata scionlab/fixtures/testdata.yaml

      - run:
          name: Check static files
          command: |
            set -x

            # check that resource returned from a request to $1 is identical to the file at $2.
            function check_static_file
            {
              curl --fail --silent "http://localhost/$1" --output /tmp/check_static_file.tmp
              cmp --silent /tmp/check_static_file.tmp "$2" ||
                { echo "The resource returned from '$1' is not identical to the file at '$2'";
                  false; }
            }
            check_static_file favicon.ico scionlab/static/scionlab/images/favicon.ico
            check_static_file static/scionlab/images/favicon.ico scionlab/static/scionlab/images/favicon.ico
            check_static_file static/scionlab/style.css scionlab/static/scionlab/style.css

            curl --silent --head --request GET "http://localhost/static/" | grep --quiet "404 Not Found" ||
              { echo "The static/ subfolderst should not be browsable"; false; }

      - run:
          name: Check django reverse proxy
          command: |
            set -x

            # These should all exist:
            curl --fail --silent --head --request GET "http://localhost/" > /tmp/headers.txt
            grep --quiet "^Server: Caddy" /tmp/headers.txt
            grep --quiet "^Server: gunicorn/" /tmp/headers.txt
            curl --fail --silent "http://localhost/login/" > /dev/null
            curl --fail --silent "http://localhost/topology.png" > /dev/null
            curl --fail --silent "http://localhost/api/v2/topology/topology" > /dev/null

            # This one does not:
            curl --silent --head --request GET "http://localhost/foobar" | grep --quiet "404 Not Found"

workflows:
  version: 2
  lint:
    jobs:
      - style-check
  unit-tests:
    jobs:
      - unit-tests
  integration-tests:
    jobs:
      - integration-tests
  upgrade-tests:
    jobs:
      - trigger-upgrade-tests:
          type: approval
      - upgrade-tests:
          requires:
            - trigger-upgrade-tests
  production-stack-tests:
    jobs:
      - production-stack-tests
