# Copyright 2019 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  basic:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-

      - run:
          name: Install dependencies
          command: |
            python3 -m venv /tmp/venv 2>&1
            . /tmp/venv/bin/activate
            pip install --require-hashes -r requirements.txt -r dev-requirements.txt

            [ -d /tmp/scion ] || git clone https://github.com/netsec-ethz/netsec-scion.git /tmp/scion
            cd /tmp/scion
            git fetch && git checkout scionlab && git reset --hard origin/scionlab

      - save_cache:
          paths:
            - /tmp/venv
            - /tmp/scion
          key: v3-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "dev-requirements.txt" }}

      # run flake8
      - run:
          name: Run flake8 style checker
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/flake8/
            flake8 --config=flake8.ini --format junit-xml --output-file=test-reports/flake8/results.xml

      # run Django's tests (using nose as the test runner)
      - run:
          name: Run tests
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/django/
            PYTHONPATH=/tmp/scion/python python manage.py test --with-xunit --xunit-file=test-reports/django/results.xml
          when: always

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports
          destination: test-reports

  integration:
    machine:
      image: ubuntu-1604:201903-01
      # This is super nice and works like a charm BUT unfortunately it is now explicitly disabled on the free plan. Pitty
      # docker_layer_caching: true

    steps:
      - checkout

      - run:
          name: Extract host configuration info from testdata.yaml fixture
          command: |
            pip install pyyaml
            python .circleci/setup/generate-host-envs.py

      - run:
          name: Build container images
          working_directory: ~/project/.circleci
          command: |
            sed -i '/.circleci/d' ~/project/.dockerignore  # The .dockerignore is for production, we'll need this
            docker-compose build

      - run:
          name: Start coordinator
          working_directory: ~/project/.circleci
          command: |
            docker-compose run -T coord /bin/bash -c \
             './scripts/init-test-db.sh && \
              cp .circleci/setup/deploy_ssh_config run/ssh_config && \
              cp .circleci/setup/deploy_rsa* run/ && \
              chmod 644 run/deploy_rsa.pub && \
              chmod 600 run/deploy_rsa'

            docker-compose up -d coord

            # We start another container in the same network as `coord` to check `coord` is ready.
            # All exposed ports from `coord` are available on `localhost` in this new container.
            # NOTE: uses python:3.6 to re-use already fetched image from `coord`; contains more tools than ubuntu:xenial
            docker run --net circleci_as_net --entrypoint /bin/bash python:3.6 -c \
              'wget --tries 10 --retry-connrefused http://coord:8000/login/'

      # Start integration tests
      - run:
          name: Start ASes in containers
          working_directory: ~/project/.circleci
          command: |
            set -x
            docker-compose up -d as1301 as1303 as1305

            for c in as1301 as1303 as1305; do
              docker-compose exec $c /bin/bash -c \
                'scionlab-config --host-id ${SCIONLAB_HOST_ID} --host-secret ${SCIONLAB_HOST_SECRET} --url http://coord:8000'
            done

            docker-compose logs

      - run:
          name: Check AS services status
          working_directory: ~/project/.circleci
          command: |
            set -x

            sleep 10  # Give the services enough time to start (or fail)

            for c in as1301 as1303 as1305; do
              docker-compose exec $c /bin/bash -c \
                '! systemctl is-failed scion-*'
            done

      - run:
          name: Check SCION connections
          working_directory: ~/project/.circleci
          no_output_time: "3m0s"
          command: |
            set -x

            # Wait for beacons
            docker-compose exec -T as1303 /bin/bash -c \
              'until [ `grep "Registered beacons" -s -r /var/log/scion/ | wc -l` -ge 5 ]; do sleep 0.1; done;'
            docker-compose exec -T as1305 /bin/bash -c \
              'until [ `grep "Registered beacons" -s -r /var/log/scion/ | wc -l` -ge 5 ]; do sleep 0.1; done;'

            # Check that we can SCMP
            docker-compose exec -T as1301 /bin/bash -c \
              'scmp echo -c 5 -local 19-ffaa:0:1301,[127.0.0.1] -remote 19-ffaa:0:1303,[127.0.0.1]'
            docker-compose exec -T as1303 /bin/bash -c \
              'scmp echo -c 5 -local 19-ffaa:0:1303,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1]'
            docker-compose exec -T as1305 /bin/bash -c \
              'scmp echo -c 5 -local 19-ffaa:0:1305,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1]'

      - run:
          name: "Push changes to AS ffaa:0:1303"
          working_directory: ~/project/.circleci
          no_output_time: "1m0s"
          command: |
            set -x

            prev_version=$(docker-compose exec -T as1303 cat /etc/scion/gen/scionlab-config.json | jq .version)

            # Start the huey worker
            docker-compose up -d huey

            # Generate new AS-keys for 1303 and push the new configuration.
            # This waits until the configuration has been deployed.
            docker-compose exec -T coord /bin/bash -c \
             'python .circleci/actions/update-keys.py ffaa:0:1303; \
              python .circleci/actions/push-deploy.py ffaa:0:1303'

            docker-compose logs huey

            # Check that
            # i) configuration was deployed
            new_version=$(docker-compose exec -T as1303 cat /etc/scion/gen/scionlab-config.json | jq .version)
            [ "$prev_version" -lt "$new_version" ]
            # ii) connection still works
            docker-compose exec -T as1303 /bin/bash -c \
              'scmp echo -c 5 -local 19-ffaa:0:1303,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1]'

      - run:
          name: Test TRC update and push changes
          working_directory: ~/project/.circleci
          command: |
            set -x

            # Show current TRC
            TRC_version=1
            docker-compose exec -T as1301 cat "/etc/scion/gen/ISD19/ASffaa_0_1301/bs19-ffaa_0_1301-1/certs/ISD19-V${TRC_version}.trc"

            # Update core keys which requires creating a new TRC
            # XXX: Update keys for non-core ASes force reissuing AS certs.
            #      Otherwise we create an inconsistent gen/ folder, see
            #      https://github.com/netsec-ethz/scionlab/issues/194.
            docker-compose exec -T coord /bin/bash -c \
             'python .circleci/actions/update-keys.py --core-keys ffaa:0:1301; \
              python .circleci/actions/update-keys.py ffaa:0:1303 ffaa:0:1305; \
              python .circleci/actions/push-deploy.py ffaa:0:1301 ffaa:0:1303 ffaa:0:1305'

            docker-compose logs huey
            docker-compose logs coord

            # Check that TRCs were updated
            TRC_version=$((TRC_version + 1))
            docker-compose exec -T as1301 stat -t "/etc/scion/gen/ISD19/ASffaa_0_1301/bs19-ffaa_0_1301-1/certs/ISD19-V${TRC_version}.trc"
            docker-compose exec -T as1303 stat -t "/etc/scion/gen/ISD19/ASffaa_0_1303/bs19-ffaa_0_1303-1/certs/ISD19-V${TRC_version}.trc"
            docker-compose exec -T as1305 stat -t "/etc/scion/gen/ISD19/ASffaa_0_1305/bs19-ffaa_0_1305-1/certs/ISD19-V${TRC_version}.trc"

            # Check that infra still works
            sleep 30 # wait for paths to register, see `Check SCION connections` for an active wait
            docker-compose exec -T as1301 /bin/bash -c \
              'scmp echo -c 5 -local 19-ffaa:0:1301,[127.0.0.1] -remote 19-ffaa:0:1303,[127.0.0.1]'
            docker-compose exec -T as1303 /bin/bash -c \
              'scmp echo -c 5 -local 19-ffaa:0:1303,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1]'
            docker-compose exec -T as1305 /bin/bash -c \
              'scmp echo -c 5 -local 19-ffaa:0:1305,[127.0.0.1] -remote 19-ffaa:0:1301,[127.0.0.1]'

      - run:
          name: Start VPN containers and verify the connection over VPN works
          working_directory: ~/project/.circleci
          command: |
            set -x
            # Skip if not running locally, since CircleCI does not support docker privileged
            # Run locally with: circleci local execute --job build -e CIRCLE_ENV=local
            if [[ ${CIRCLE_ENV} != *"local"* ]]; then
              exit 0
            fi
            echo "Start containers required for VPN AP and verify they are working"
            docker-compose -f .circleci/docker-compose.yml create as1401 as1405

            # Load setup files
            for dst_AS in as1401 as1405; do
                for f in $(ls .circleci/setup/); do
                    docker cp .circleci/setup/${f} ${dst_AS}:${SC}/
                done
            done
            docker-compose -f .circleci/docker-compose.yml up --no-recreate -d as1401 as1405
            # Wait for AP to be set up (key generation is slow)
            docker exec as1405 /bin/bash -c "until [ -e ${SC}/done ]; do sleep 0.1; done;"
            echo "AP started"

            # Start user AS container, create user AS and connect:
            docker run --net circleci_as_net --privileged -dt --name userAS1\
              --entrypoint /bin/bash scionhost:tmp -c 'sleep 10; ${SC}/VPNnewUserAS.sh; cat;'  # waits for setup script to be loaded
            for f in $(ls .circleci/setup/); do
                docker cp .circleci/setup/${f} userAS1:${SC}/
            done
            # Wait for client to be setup
            echo "Waiting for beaconing before starting VPN client SCMPs"
            docker exec -e SC=${SC} userAS1 /bin/bash -c 'until [ `grep "Registered beacons" -s -r /var/log/scion/ | wc -l` -ge 5 ]; do sleep 0.1; done; scmp echo -c 10 -local 20-ffaa:1:1,[127.0.0.1] -remote 20-ffaa:0:1405,[127.0.0.1]'
            docker stop userAS1; docker rm userAS1;

workflows:
  version: 2
  tests:
    jobs:
      - basic
      - integration
