# Copyright 2018 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      #- image: circleci/python:3.6.1
      - image: scionproto/scion_base@sha256:975646f75df9db5a0dd882a4bc6bac36dd63201e0aff920f7ee711053b1ca48e

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run:
          name: install dependencies
          command: |
            sudo DEBIAN_FRONTEND=noninteractive apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq apt-utils
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq git
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq python3-venv
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq python3-nacl  # python3-lz4 python3-openssl python3-pygments python3-sphinx python3-yaml python3-wheel
            /usr/bin/python3 -m venv /tmp/venv 2>&1
            . /tmp/venv/bin/activate
            pip install --require-hashes -r requirements.txt -r dev-requirements.txt
            mkdir -p /home/scion/go/src/github.com/scionproto/
            cd /home/scion/go/src/github.com/scionproto/
            git clone https://github.com/netsec-ethz/netsec-scion.git scion
            #pip install --require-hashes -r /home/scion/go/src/github.com/scionproto/scion/env/pip3/requirements.txt

      - save_cache:
          paths:
            - /tmp/venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}

      # run flake8
      - run:
          name: run flake8 style checker
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/flake8/
            flake8 --config=flake8.ini --format junit-xml --output-file=test-reports/flake8/results.xml

      # run Django's tests (using nose as the test runner)
      - run:
          name: run tests
          command: |
            . /tmp/venv/bin/activate
            mkdir -p test-reports/django/
            # Create migrations, otherwise test DB will not be initialised properly
            # TODO: remove once migrations are checked in!
            PYTHONPATH=$PYTHONPATH:/usr/lib/python3/dist-packages:/home/scion/go/src/github.com/scionproto/scion/python python manage.py makemigrations scionlab
            PYTHONPATH=$PYTHONPATH:/usr/lib/python3/dist-packages:/home/scion/go/src/github.com/scionproto/scion/python python manage.py test --with-xunit --xunit-file=test-reports/django/results.xml
          when: always

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports
          destination: test-reports

