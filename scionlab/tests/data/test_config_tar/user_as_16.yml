README.md: |
  # SCIONLabVM
  SCIONLab Virtual Machine


  ## Setup of the virtual machine

  ### For Ubuntu and Mac OS users:

  The shell script `run.sh` will automatically check your system and install
  the necessary packages to run SCIONLabVM, such as `vagrant` and `virtualbox`.
  It will also create and configure the SCIONLabVM automatically.

  Please Note: SCIONLabVM requires `vagrant 1.9.7`, `virtualbox 5.0.4` or above.

  In order to install the latest version of packages, the shell script will run
  apt-get update on your system. Please make sure that all the running VMs are
  suspended or closed before running the script.

  If you agree with these requirements, you can then simply setup your SCIONLabVM via:
  `./run.sh` from inside the downloaded folder.

  Once the setup is finished, you will automatically be inside the SCIONLabVM
  through SSH. After this step, you will be ready to run SCION as described below.


  ### For users of other Linux distributions:

  You need to install `vagrant` and `virtualbox` manually using your distribution`s package manager.

  After the install is done, run the following commands from inside the downloaded folder:
  ```
  vagrant box add scion/ubuntu-16.04-64-scion
  vagrant box update
  vagrant up
  vagrant ssh
  ```

  After this, you are connected to your VM via ssh, where you can run SCION as described below.


  ### For Windows users:

  SCIONLabVM requires `virtualbox` and `vagrant`.
  First, you need to download and install the `virtualbox` from:
  https://www.virtualbox.org/wiki/Downloads

  After this step, you also need to download and install `vagrant` from:
  https://www.vagrantup.com/downloads.html

  Afterwards, open a terminal window and go to the SCIONLabVM folder where the
  `Vagrantfile` is located. Now, you can run `vagrant up`. The command will
  automatically download the base VM image storing `ubuntu/ubuntu-16.04-64-scion`, and
  install SCION with all other dependencies.

  If the `vagrant up` command returns the prompt, you are ready to have fun with SCIONLabVM.

  Finally, you can run `vagrant ssh` to connect to your VM, where you can run SCION as described below.


  ## Running SCION

  The SCION infrastructure is automatically started when the VM boots up.

  After your setup is activated at the designated SCIONLab AS, you should be able to see the beacons
  being received.
  You can test this by checking the logs in `~/go/src/github.com/scionproto/scion/logs/` or by simply
  calling `checkbeacons`.


  ## Stopping and Restarting the VM

  You can stop and restart `SCIONLabVM` using `vagrant` commands.
  In order to stop the VM, run `vagrant halt` from the downloaded configuration folder.
  If you want start the VM again, just run `vagrant up`.
  More information for `vagrant` commands can be found at:
  https://www.vagrantup.com/docs/cli

  ## Troubleshooting

  If an error occurs during the setup process (e.g., a network disruption) the virtual machine may not
  be fully functional. In this case you can either manually run the commands specified in the
  `Vagrantfile` or alternatively call
  ```
  vagrant destroy
  vagrant up
  ```
  from inside the directory where you unpacked your vm configuration (i.e., where the `Vagrantfile` is
  located).

  If you experience problems with the SCION services, you may want to manually restart the
  SCION infrastructure by either calling `sudo systemctl restart scion.service` or by moving to the
  scion directory and calling `./scion.sh stop` followed by `./scion.sh start nobuild`.


  ## Current Vagrant Configuration

  The configurations for `vagrant` are defined in the `Vagrantfile` file.
  Additional documentation can be found at:
  https://www.vagrantup.com/docs/vagrantfile
Vagrantfile: "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nENV['VAGRANT_DEFAULT_PROVIDER']\
  \ = 'virtualbox'\n\nVagrant.require_version \">= 1.8.1\"\n\nVagrant.configure(2)\
  \ do |config|\n  $setup_scion = <<-'SCRIPT'\n    set -e\n\n    echo 'install needed\
  \ standard packages'\n    apt-get update >/dev/null\n    apt-get install -y apt-transport-https\
  \ ntp openvpn\n\n    echo 'copy SCIONLab config file'\n    mkdir -p /etc/scion/gen\n\
  \    cp -r /vagrant/gen/scionlab-config.json /etc/scion/gen/\n\n    echo 'install\
  \ SCIONLab'\n    echo \"deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian\
  \ all main\" > /etc/apt/sources.list.d/scionlab.list\n    echo -e \"`crontab -l`\"\
  \"\\n`date -d '07:00 UTC' '+%M %H'` * * * apt-get update; apt-get install -y --only-upgrade\
  \ scionlab\" | crontab\n    apt-get update > /dev/null\n    apt-get install -y scionlab\
  \  # this also installs and runs scionlab-config\n\n    echo 'configure time sync'\n\
  \    sed -i -- 's/^\\(\\s*start-stop-daemon\\s*--start\\s*--quiet\\s*--oknodo\\\
  s*--exec\\s*\\/usr\\/sbin\\/VBoxService\\)$/\\1 -- --disable-timesync/g' /etc/init.d/virtualbox-guest-utils\
  \ || true\n    systemctl daemon-reload\n    systemctl restart virtualbox-guest-utils\n\
  \    systemctl enable ntp\n    # not needed: sed -i \"s/^NTPD_OPTS='\\(.*\\)'/NTPD_OPTS=\\\
  '\\1\\ -g'/g\" /etc/default/ntp\n    echo -e \"tinker panic 0\\n\" >> /etc/ntp.conf\n\
  \    sed -i 's/\\(pool .*\\)$/\\1 minpoll 1 maxpoll 6/g' /etc/ntp.conf\n\n    echo\
  \ 'configure unattended upgrades (automatic security upgrades)'\n    echo 'Unattended-Upgrade::Allowed-Origins\
  \ {\n\"${distro_id}:${distro_codename}-security\";\n\"${distro_id}ESM:${distro_codename}\"\
  ;\n};\nUnattended-Upgrade::Automatic-Reboot \"true\";\nUnattended-Upgrade::Automatic-Reboot-Time\
  \ \"02:00\";' > /etc/apt/apt.conf.d/51unattended-upgrades-security\n\n    # TODO(juagargi):\
  \ install scion-apps\n    echo \"SCIONLab VM ready\"\n  SCRIPT\n\n  config.vm.box\
  \ = \"ubuntu/xenial64\"\n  # BR port forwarding not necessary for OpenVPN setup\
  \ and depends on connection\n  \n  config.vm.network \"forwarded_port\", guest:\
  \ 31042, host: 31042, protocol: \"udp\"\n  config.vm.network \"forwarded_port\"\
  , guest: 30041, host: 30041, protocol: \"udp\"\n  config.vm.network \"forwarded_port\"\
  , guest: 8000, host: 8000, protocol: \"tcp\"\n  config.vm.provider \"virtualbox\"\
  \ do |vb|\n    vb.customize [ \"setextradata\", :id, \"VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled\"\
  , 1 ]\n    vb.memory = \"2048\"\n    vb.name = \"SCIONLabVM-ffaa:1:1\"\n  end\n\
  \  config.vm.hostname = \"scionlab-ffaa-1-1\"\n  config.vm.provision \"shell\",\
  \ privileged: true, inline: $setup_scion\nend\n"
gen/scionlab-config.json: |-
  {
    "host_id": "28b555e9a72249c58e0e8b15d2845700",
    "host_secret": "d0c6141a6d9b4a91b355d560835cfcd7",
    "url": "http://localhost:8000"
  }
run.sh: "#!/usr/bin/env bash\n\n# BEGIN subcommand functions\n\nVB=\"virtualbox\"\n\
  VG=\"vagrant\"\nVM=\"vagrant-manager\"\n\nrun_vagrant() {\n    echo \"[SCIONLabVM]\
  \ run vagrant\"\n    vagrant box add scion/ubuntu-16.04-64-scion\n    vagrant box\
  \ update\n    vagrant up\n    vagrant ssh\n}\n\nrun_osx() {\n    echo \"[SCIONLabVM]\
  \ Given system: OSX\"\n    if ! type \"brew\" > /dev/null; then\n        echo \"\
  [SCIONLabVM] Now installing Homebrew\"\n        ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\
  \n    fi\n    for pkg in $VB $VG $VM; do\n        if pkgutil --pkgs=$pkg > /dev/null;\
  \ then\n            echo \"[SCIONLabVM] $pkg is already installed\"\n        elif\
  \ brew cask ls $pkg > /dev/null; then\n            echo \"[SCIONLabVM] $pkg is already\
  \ installed\"\n        else\n            echo \"[SCIONLabVM] Installing $pkg\"\n\
  \            brew cask install --force $pkg\n        fi\n    done\n    run_vagrant\n\
  }\n\n# version less or equal. E.g. verleq 1.9 2.0.8  == true (1.9 <= 2.0.8)\nverleq()\
  \ {\n    [  \"$1\" = \"`echo -e \"$1\\n$2\" | sort -V | head -n1`\" ]\n}\n\nrun_linux()\
  \ {\n    if [[ -f \"/usr/bin/apt-get\" && -f \"/usr/bin/dpkg\" ]]\n    then\n  \
  \      echo \"[SCIONLabVM] Given system: LINUX\"\n        if dpkg --get-selections\
  \ | grep -q \"^$VB.*[[:space:]]\\{1,\\}install$\" >/dev/null; then\n           \
  \ echo \"[SCIONLabVM] $VB is already installed\"\n        else\n            while\
  \ true; do\n                read -p \"[SCIONLabVM] Do you want to install/upgrade\
  \ $VB now? If no, it will terminate SCIONLabVM immediately. [y/n]\" yesno\n    \
  \            case $yesno in\n                    [Yy]*)\n                      \
  \  echo \"[SCIONLabVM] Installing $VB\"\n                        sudo apt-get --no-remove\
  \ --yes install virtualbox\n                    break;;\n                    [Nn]*)\
  \ echo \"[SCIONLabVM] Closing SCIONLabVM installation.\"; exit 1;;\n           \
  \         *) ;;\n                esac\n            done\n        fi\n        if\
  \ dpkg --get-selections | grep -q \"^$VG.*[[:space:]]\\{1,\\}install$\" >/dev/null;\
  \ then\n            echo \"[SCIONLabVM] $VG is already installed\"\n        else\n\
  \            while true; do\n                read -p \"[SCIONLabVM] Do you want\
  \ to install/upgrade $VG now? If no, it will terminate SCIONLabVM immediately. [y/n]\"\
  \ yesno\n                case $yesno in\n                    [Yy]*)\n          \
  \              echo \"[SCIONLabVM] Installing $VG\"\n                        sudo\
  \ apt-get --no-remove --yes install $VG\n                    break;;\n         \
  \           [Nn]*) echo \"[SCIONLabVM] Closing SCIONLabVM installation.\"; exit\
  \ 1;;\n                    *) ;;\n                esac\n            done\n     \
  \   fi\n        run_vagrant\n    else\n        echo \"Currently, this script does\
  \ not support your linux distribution.\"\n        echo \"Please follow the instructions\
  \ in the README file to run the SCIONLab AS.\"\n    fi\n}\n\n\ncase \"$OSTYPE\"\
  \ in\n  darwin*)\n        \"run_osx\" ;;\n  linux*)\n        \"run_linux\" ;;\n\
  \  solaris*|bsd*|msys|*) \n    echo \"Currently, this script does not support $OSTYPE\
  \ system.\"\n    echo \"Please follow the instructions in the README file to run\
  \ the SCIONLab AS.\" ;;\nesac\n"
