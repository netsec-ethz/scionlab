README.md: |
  # SCIONLab VM

  ## Install Vagrant and VirtualBox

  Running your AS in a VM as suggested below requires Vagrant and VirtualBox.

  Please install Vagrant and VirtualBox:
    - https://www.virtualbox.org/wiki/Downloads
    - https://www.vagrantup.com/docs/installation/

  On recent Ubuntu or Debian systems, it may be enough to run

    $ sudo apt-get install vagrant virtualbox


  ## Using Vagrant to run the VM

  Navigate your shell to the directory containing the Vagrantfile (and this README).
  Note that all vagrant commands always need to be run in this directory!
  To start your VM, run

    $ vagrant up

  When running you're VM for the first time, this will download the Ubuntu base box
  and then install all the SCION packages and their dependencies.

  This will already start the services for your SCIONLab AS.

  Once the `vagrant up` command returns the prompt, you can connect to your VM to
  start exploring:

    $ vagrant ssh

  The directory containing the Vagrant file is synced with the VM where the files
  will appear in the `/vagrant/` directory.
  This is convenient way to share files between your your host machine and your
  VM, and allows to move data both ways.

  To shutdown the VM, run

    $ vagrant halt

  To start it back up, just type `vagrant up` again. Finally, if you want to wipe
  your VM, e.g. to start fresh, run `vagrant destroy`.

  More information for `vagrant` commands can be found at:
  https://www.vagrantup.com/docs/cli


  ## Running SCION

  The SCION infrastructure is automatically started when the VM boots up.

  Please refer to the online tutorials for more information:
  https://netsec-ethz.github.io/scion-tutorials/
Vagrantfile: |
  # -*- mode: ruby -*-
  # vi: set ft=ruby :

  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

  Vagrant.require_version ">= 1.8.1"

  Vagrant.configure(2) do |config|
    $setup_scion = <<-'SCRIPT'
      set -e

      echo 'install needed standard packages'
      apt-get update >/dev/null
      apt-get install -y apt-transport-https ntp openvpn

      echo 'install SCIONLab'
      echo "deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main" > /etc/apt/sources.list.d/scionlab.list
      echo -e "`crontab -l`""\n`date -d '07:00 UTC' '+%M %H'` * * * apt-get update; apt-get install -y --only-upgrade scionlab" | crontab
      apt-get update > /dev/null
      apt-get install -y scionlab

      echo 'configure time sync'
      sed -i -- 's/^\(\s*start-stop-daemon\s*--start\s*--quiet\s*--oknodo\s*--exec\s*\/usr\/sbin\/VBoxService\)$/\1 -- --disable-timesync/g' /etc/init.d/virtualbox-guest-utils || true
      systemctl daemon-reload
      systemctl restart virtualbox-guest-utils
      systemctl enable ntp
      # not needed: sed -i "s/^NTPD_OPTS='\(.*\)'/NTPD_OPTS=\'\1\ -g'/g" /etc/default/ntp
      echo -e "tinker panic 0\n" >> /etc/ntp.conf
      sed -i 's/\(pool .*\)$/\1 minpoll 1 maxpoll 6/g' /etc/ntp.conf

      echo 'configure unattended upgrades (automatic security upgrades)'
      echo 'Unattended-Upgrade::Allowed-Origins {
  "${distro_id}:${distro_codename}-security";
  "${distro_id}ESM:${distro_codename}";
  };
  Unattended-Upgrade::Automatic-Reboot "true";
  Unattended-Upgrade::Automatic-Reboot-Time "02:00";' > /etc/apt/apt.conf.d/51unattended-upgrades-security

      # Fetch configuration from coordinator and start SCION
      scionlab-config --host-id=555bf41978f74827a884a0ce49f50900 --host-secret=605628f18cb24529acc7eb28a3ae3ef1 --url=http://localhost:8000

      # TODO(juagargi): install scion-apps
      echo "SCIONLab VM ready"
    SCRIPT

    config.vm.box = "ubuntu/xenial64"
    # forward border router port (unless using OpenVPN):
    config.vm.network "forwarded_port", guest: 54321, host: 54321, protocol: "udp"
    # forward scion dispatcher port, for running SCION endhosts connected to the AS in this VM:
    config.vm.network "forwarded_port", guest: 30041, host: 30041, protocol: "udp"
    # forward "webapp" port:
    config.vm.network "forwarded_port", guest: 8000, host: 8000, protocol: "tcp"
    config.vm.provider "virtualbox" do |vb|
      vb.customize [ "setextradata", :id, "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled", 1 ]
      vb.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
      vb.memory = "2048"
      vb.name = "SCIONLabVM-ffaa:1:2"
    end
    config.vm.hostname = "scionlab-ffaa-1-2"
    config.vm.provision "shell", privileged: true, inline: $setup_scion
  end
