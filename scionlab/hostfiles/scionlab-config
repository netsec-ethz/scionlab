#!/usr/bin/env python3
# Copyright 2018 ETH Zurich
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
scionlab-config  --  configuration script for scionlab hosts

The scionlab-config script fetches the bundled configuration for a scionlab host from
the scionlab.org coordination website and installs it in this machine.

Prerequisites:
    - must be run as root.
    - an installation of SCION (with all its dependencies) either in the form of packages
        or in the old form, which will be replaced with the packages form by this script.
    - openvpn installed, if used
"""

import argparse
import base64
import io
import json
import logging
import os
import shutil
import shlex
import subprocess
import sys
import tarfile
import tempfile
import urllib.request
import time
from collections import namedtuple


SCION_CONFIG_PATH = '/etc/scion/'
SERVICE_FILES_DIR = '/etc/systemd/system/'

DEFAULT_CONFIG_INFO_PATH = os.path.join(SCION_CONFIG_PATH, 'gen/scionlab-config.json')
DEFAULT_COORDINATOR_URL = 'https://www.scionlab.org'
REQUEST_TIMEOUT_SECONDS = 10


_CONFIG_EMPTY = object()
_CONFIG_UNCHANGED = object()

ConfigInfo = namedtuple('ConfigInfo',
                        ['host_id',
                         'host_secret',
                         'url',
                         'version'])

logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.WARNING)


def main(argv):
    sys.tracebacklimit = -1
    args = parse_command_line_args(argv)

    if os.geteuid() != 0:
        _error_exit("The script must be run as root")
    if not args.tar:
        config_info = get_config_info(args)
        config = fetch_config(config_info)
        if config is _CONFIG_EMPTY:
            # stop_scion()
            pass
        elif config is _CONFIG_UNCHANGED:
            logging.info('Configuration unchanged (version %s). Nothing to do.',
                         config_info.version)
        else:
            install_config(config)
            confirm_deployed(args)
    else:
        tar = tarfile.open(args.tar, mode='r')
        install_config(tar)


def parse_command_line_args(argv):
    parser = argparse.ArgumentParser(description='Install configuration for a SCIONLab host.')

    group_fetch = parser.add_argument_group('Fetch options')
    parser.add_argument('--config-info',
                        help="Path to json file containing host-id, secret and the local version. "
                             "(default=%s)" % DEFAULT_CONFIG_INFO_PATH)
    group_fetch.add_argument('--host-id', help='Host identifier')
    group_fetch.add_argument('--host-secret', help='Authentication for host')
    # Either 'local-version' or 'force'
    group_version = group_fetch.add_mutually_exclusive_group()
    group_version.add_argument('--local-version', help='',
                               action='store', type=int)
    group_version.add_argument('--force', help='',
                               action='store_true')
    group_fetch.add_argument('--url', help='URL of the SCIONLab coordination service')

    parser.add_argument('--tar')

    return parser.parse_args(argv[1:])


def get_config_info(args):
    if args.config_info:
        return _get_config_info_from_file(args.config_info, args)
    elif args.host_id or args.host_secret:
        if not args.host_id and args.host_secret:
            _error_exit("Either none of or --host-id and --host-secret parameters need to be set")
        return ConfigInfo(args.host_id,
                          args.host_secret,
                          args.url or DEFAULT_COORDINATOR_URL,
                          args.local_version if not args.force else None)
    else:
        if not os.path.exists(DEFAULT_CONFIG_INFO_PATH):
            _error_exit("No scionlab config info file found at '%s'. Please specify the path to "
                        "an existing config info file with --config-info, or explicitly provide "
                        "authentication parameters for this host with --host-id and --host-secret.",
                        DEFAULT_CONFIG_INFO_PATH)
        return _get_config_info_from_file(DEFAULT_CONFIG_INFO_PATH, args)


def _get_config_info_from_file(file, args):
    """
    Load config info file.
    Overwrite url with the URL argument.
    Overwrite the version if '--force' or '--local-version' are given.
    """
    config_info = _load_config_info(file)

    if args.url:
        config_info = config_info._replace(url=args.url)

    if args.force:
        config_info = config_info._replace(version=None)
    elif args.local_version:
        config_info = config_info._replace(version=args.local_version)

    return config_info


def _load_config_info(file):
    """
    Load and parse the config info json-file.
    :returns: ConfigInfo
    """
    try:
        with open(file, 'r') as f:
            config_info_dict = json.load(f)
    except IOError as e:
        _error_exit("Error loading the scionlab config info file '%s': %s", file, e)
    try:
        return ConfigInfo(config_info_dict['host_id'],
                          config_info_dict['host_secret'],
                          config_info_dict.get('url') or DEFAULT_COORDINATOR_URL,
                          config_info_dict.get('version'))
    except KeyError as e:
        _error_exit("Invalid scionlab config info file '%s': %s", file, e)


def fetch_config(config_info):
    """
    Request configuration tar-ball from SCIONLab coordinator.

    If available from either the config file or the command line and --force is not used, the
    request sent to the coordinator will include the currently installed version. If the current
    version is already the latest version, the server will reply with 304 Not Modified.

    :param ConfigInfo config_info: base url, host-id/secret for authentication, version (optional).
    :returns:
        - _CONFIG_UNCHANGED if the current version is already the latest version, or
        - _CONFIG_EMPTY if there is currently no configuration for this host, or
        - tarfile.tar the configuration archive
    """

    url = '{coordinator_url}/api/host/{host_id}/config'.format(
        coordinator_url=config_info.url.rstrip('/'),
        host_id=config_info.host_id
    )

    # version may be None (if "--force" is used or if version is not in the config info file and
    # we will behave like --force here if the config is not yet ready for deb packages)
    data = {}
    if config_info.version:
        data['version'] = config_info.version

    try:
        conn = _http_get(url, data, username=config_info.host_id, password=config_info.host_secret)
        response_data = conn.read()
    except urllib.error.HTTPError as e:
        if e.code == 304:
            return _CONFIG_UNCHANGED
        elif e.code == 204:
            return _CONFIG_EMPTY
        else:
            _error_exit("Failed to fetch configuration from SCIONLab coordinator at %s: %s",
                        config_info.url, e)
    except Exception as e:
        _error_exit("Failed to fetch configuration from SCIONLab coordinator at %s: %s",
                    config_info.url, e)
    return tarfile.open(mode='r:gz', fileobj=io.BytesIO(response_data))


def confirm_deployed(args):
    """
    Inform the SCIONLab coordinator of the currently installed version of the configuration. This
    confirms that this version has been sucessfully installed. This information is used coordinator
    by the coordinator only in the case where it actively pushes configuration to a host. A failure
    in this step is generally unproblematic.

    :param args: commandline arguments for optional coordinator URL
    """
    # Get newly installed config info
    config_info = _load_config_info(DEFAULT_CONFIG_INFO_PATH)
    if args.url:
        config_info = config_info._replace(url=args.url)

    url = '{coordinator_url}/api/host/{host_id}/deployed_config_version'.format(
        coordinator_url=config_info.url.rstrip('/'),
        host_id=config_info.host_id
    )
    data = {'version': config_info.version}
    _http_post(url, data, username=config_info.host_id, password=config_info.host_secret)


def _http_get(url, params, username, password):
    """ Helper: make GET request to URL with given params.  """
    query = ''
    if params:
        query += '?' + urllib.parse.urlencode(params)
    request = urllib.request.Request(url + query)
    _add_basic_auth(request, username, password)
    return urllib.request.urlopen(
        request,
        timeout=REQUEST_TIMEOUT_SECONDS
    )


def _http_post(url, params, username, password):
    """ Helper: make POST request to URL with given params """

    request = urllib.request.Request(url,
                                     data=urllib.parse.urlencode(params).encode('utf-8'),
                                     method='POST')
    _add_basic_auth(request, username, password)
    return urllib.request.urlopen(
        request,
        timeout=REQUEST_TIMEOUT_SECONDS
    )


def _add_basic_auth(request, username, password):
    """ Helper: add basic authorization header to a request """
    uname_pwd = '%s:%s' % (username, password)
    uname_pwd_encoded = base64.b64encode(uname_pwd.encode('utf-8')).decode('ascii')
    request.add_header("Authorization", "Basic %s" % uname_pwd_encoded)


def _error_exit(*args, **kwargs):
    logging.error(*args, **kwargs)
    sys.exit(1)


def install_config(tar):
    try:
        tmpdir = tempfile.mkdtemp()
        tar.extractall(path=tmpdir)
        install_vpn_client_config(tmpdir)
        install_scionlab_service(tmpdir)
        install_scion_config(tmpdir)
        install_vpn_server_config(tmpdir)
    finally:
        shutil.rmtree(tmpdir)


def install_scion_config(tmpdir):
    """ Moves gen to /etc/scion/gen """
    sc = SCION_CONFIG_PATH
    if not os.path.isdir(sc):
        _error_exit('No SCION configuration directory found at %s', sc)
    _mv_dir(tmpdir, 'gen', sc)
    subprocess.run(['chown', '-R', 'scion:scion', os.path.join(SCION_CONFIG_PATH, 'gen')])
    restart_scion()


def install_scionlab_service(tmpdir):
    """ Creates the appropriate dependencies for scionlab.target """

    scionlab_services = os.path.join(tmpdir, 'scionlab-services.txt')
    if not os.path.exists(scionlab_services):
        _error_exit("Could not find the scionlab-services.txt file in %s", tmpdir)

    # 1. remove existing links to scionlab.target
    wants = '/etc/systemd/system/scionlab.target.wants/'
    if os.path.exists(wants):
        for f in os.listdir(wants):
            f = os.path.join(wants, f)
            os.remove(f)
        subprocess.run(['systemctl', 'daemon-reload'], check=True)

    # 2. add links to scionlab.target
    with open(scionlab_services, 'r') as f:
        services = f.readlines()
    for srv in services:
        srv = srv.strip()
        subprocess.run(['systemctl', 'enable', srv])


def restart_scion():
    # TODO quick reload: only restart if set of processes changed, otherwise trigger config
    # reloading
    subprocess.run(['systemctl', 'restart', 'scionlab.target'], check=True)


def install_vpn_client_config(tmpdir):
    exists, changed = _install_file(tmpdir, 'client.conf', '/etc/openvpn/')
    if changed:
        if exists:
            subprocess.run(['systemctl', 'restart', 'openvpn@client'], check=True)
            # ensure the interface is up; give up after 5 tries
            vpn_ready = False
            for i in range(5):
                logging.debug('Waiting for VPN ...')
                time.sleep(1)
                st = subprocess.run(['ip', 'address', 'show', 'dev', 'tun0'],
                                    stdout=subprocess.DEVNULL,
                                    stderr=subprocess.DEVNULL)
                if st.returncode == 0:
                    vpn_ready = True
                    break
            if vpn_ready:
                logging.debug("Got VPN")
            else:
                logging.warn('WARNING!: VPN could be unready. SCION may fail to start.')
        else:
            subprocess.run(['systemctl', 'stop', 'openvpn@client'], check=True)


def install_vpn_server_config(tmpdir):
    exists, changed = _install_file(tmpdir, 'server.conf', '/etc/openvpn/')
    if changed:
        if exists:
            if not os.path.exists('/etc/openvpn/dh.pem'):
                subprocess.run(['openssl', 'dhparam', '-out', '/etc/openvpn/dh.pem', '2048'],
                               check=True)
            subprocess.run(['systemctl', 'restart', 'openvpn@server'], check=True)
        else:
            subprocess.run(['systemctl', 'stop', 'openvpn@server'], check=False)

    if exists:
        subprocess.run(['rm', '-rf', '/etc/openvpn/ccd/'], check=True)
        subprocess.run(['mv', os.path.join(tmpdir, 'ccd'), '/etc/openvpn/'], check=True)


def _mv_dir(srcdir, dirname, dstdir):
    shutil.rmtree(os.path.join(dstdir, dirname), ignore_errors=True)
    shutil.move(os.path.join(srcdir, dirname), dstdir)


def _install_file(srcdir, filename, dstdir):
    """
    Installs the file from srcdir into the directory dstdir.
    If the file doesn't exist in srcdir, the file at dstdir will be removed.
    :returns:   tuple (exists, changed):
                    exists indicates whether the file exists now.
                    changed indicates whether the file was changed.
    """
    srcfilename = os.path.join(srcdir, filename)
    dstfilename = os.path.join(dstdir, filename)
    if not os.path.exists(srcfilename):
        if os.path.exists(dstfilename):
            subprocess.run(['rm', dstfilename], check=True)
            return (False, True)
        return (False, False)

    equal = subprocess.run(['diff', '-q', srcfilename, dstfilename],
                           check=False,
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL).returncode == 0
    if not equal:
        subprocess.run(['mv', srcfilename, dstfilename], check=True)
    return (True, not equal)


def _get_argv():
    """
    Parse args from SSH_ORIGINAL_COMMAND, if set.
    Allows to restrict ssh access to running this script, eg.

    .ssh/authorized_keys:
        command=scionlab-config <...key...> auto-deploy@scionlab.org
    """
    ssh_original_cmd = os.environ.get('SSH_ORIGINAL_COMMAND')
    if ssh_original_cmd:
        argv = shlex.split(ssh_original_cmd)
        if not argv or argv[0] != os.path.basename(sys.argv[0]):  # avoid silly things
            return None
        return argv
    return sys.argv


if __name__ == '__main__':
    argv = _get_argv()
    if argv:
        main(argv)
