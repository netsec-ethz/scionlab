# Generated by Django 3.1.6 on 2021-03-26 05:17
# NOTE(matzf): created to squash previously existing migrations 0001-0011.
# Squashing does not optimize all intermediate model revisions avway (even when marking all
# RunPython as elidable), and so we'd pointlessly need to keep some dependencies (jsonfield).
# this was created by:
#  - squashmigrations and put the result aside
#  - remove all existing migrations
#  - makemigrations
#  - add the replaces from the squashed migration to this new 0001_init file
# Of course this can only be done because I know that all our systems (there is only 1) have all
# migrations applied.


from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re
import scionlab.models.core
import scionlab.models.pki
import scionlab.models.user


class Migration(migrations.Migration):

    replaces = [('scionlab', '0001_initial'), ('scionlab', '0002_SCIONLab_upgrade-2019-08'), ('scionlab', '0003_installation_types'), ('scionlab', '0004_multiap'), ('scionlab', '0005_monolith'), ('scionlab', '0006_pki'), ('scionlab', '0007_new_cppki'), ('scionlab', '0008_new_cppki_cont'), ('scionlab', '0009_remove_interface_bind_port'), ('scionlab', '0010_remove_router_internal_port_ctrl_port'), ('scionlab', '0011_pullap')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=255, verbose_name='password')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('organisation', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', scionlab.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('as_id', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(regex=re.compile('^([0-9a-fA-F]{1,4}):([0-9a-fA-F]{1,4}):([0-9a-fA-F]{1,4})$')), django.core.validators.RegexValidator(inverse_match=True, regex='0+:0+:0+')], verbose_name='AS-ID')),
                ('as_id_int', models.BigIntegerField(editable=False)),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
                ('mtu', models.PositiveIntegerField(default=1472, help_text='Maximum Transfer Unit for intra AS packets.')),
                ('master_as_key', models.CharField(blank=True, max_length=255, null=True)),
                ('is_core', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'AS',
                'verbose_name_plural': 'ASes',
            },
        ),
        migrations.CreateModel(
            name='BorderRouter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AS', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='border_routers', to='scionlab.as')),
            ],
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_ip', models.GenericIPAddressField(default='127.0.0.1', help_text='IP of the host in the AS')),
                ('public_ip', models.GenericIPAddressField(blank=True, help_text='Default public IP for border router interfaces running on this host.', null=True)),
                ('bind_ip', models.GenericIPAddressField(blank=True, help_text='Default bind IP for border router interfaces running on this host.', null=True)),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
                ('ssh_host', models.CharField(blank=True, help_text='Hostname or IP for management access via SSH. Configured in run/ssh_config.', max_length=255, null=True)),
                ('uid', models.CharField(editable=False, help_text='Identifier for API', max_length=255, unique=True, verbose_name='UID')),
                ('secret', models.CharField(help_text='Secret token for API', max_length=255)),
                ('config_version', models.PositiveIntegerField(default=1)),
                ('config_version_deployed', models.PositiveIntegerField(default=0)),
                ('config_queried_at', models.DateTimeField(blank=True, null=True)),
                ('AS', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hosts', to='scionlab.as')),
            ],
            options={
                'unique_together': {('AS', 'internal_ip')},
            },
            managers=[
                ('objects', scionlab.models.core.HostManager()),
            ],
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface_id', models.PositiveSmallIntegerField()),
                ('public_ip', models.GenericIPAddressField(blank=True, help_text="Public IP for this interface. If this is not null, overrides the Host's default\n            public IP.", null=True)),
                ('public_port', models.PositiveIntegerField()),
                ('bind_ip', models.GenericIPAddressField(blank=True, help_text="Bind IP for this interface (optional). If `public_ip` (!) is not null, this\n            overrides the Host's default bind IP.", null=True)),
                ('AS', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='scionlab.as')),
                ('border_router', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='scionlab.borderrouter')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='scionlab.host')),
            ],
        ),
        migrations.CreateModel(
            name='ISD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('isd_id', models.PositiveIntegerField()),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'ISD',
                'verbose_name_plural': 'ISDs',
            },
        ),
        migrations.CreateModel(
            name='VPN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_port', models.PositiveIntegerField()),
                ('subnet', models.CharField(max_length=15)),
                ('server_vpn_ip', models.GenericIPAddressField()),
                ('private_key', models.TextField(blank=True, null=True)),
                ('cert', models.TextField(blank=True, null=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vpn_servers', to='scionlab.host')),
            ],
            options={
                'verbose_name': 'VPN',
                'verbose_name_plural': 'VPNs',
            },
        ),
        migrations.CreateModel(
            name='UserAS',
            fields=[
                ('as_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='scionlab.as')),
                ('installation_type', models.CharField(choices=[('VM', 'Run SCION in a <em>Vagrant</em> virtual machine <i class="text-muted">(simplest approach)</i>'), ('PKG', 'SCION installation from packages'), ('SRC', 'SCION installation from sources <i class="text-muted">(for developers)</i>')], default='VM', max_length=16)),
            ],
            options={
                'verbose_name': 'User AS',
                'verbose_name_plural': 'User ASes',
            },
            bases=('scionlab.as',),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('CS', 'Control Service'), ('BW', 'Bandwidth tester server'), ('PP', 'Pingpong server')], max_length=16)),
                ('AS', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='scionlab.as')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='scionlab.host')),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('PROVIDER', 'Provider link from parent A to child B'), ('CORE', 'Core link (symmetric)'), ('PEER', 'Peering link (symmetric)')], max_length=16)),
                ('active', models.BooleanField(default=True)),
                ('bandwidth', models.PositiveIntegerField(default=1000)),
                ('mtu', models.PositiveIntegerField(default=1472)),
                ('interfaceA', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='link_as_interfaceA', to='scionlab.interface')),
                ('interfaceB', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='link_as_interfaceB', to='scionlab.interface')),
            ],
        ),
        migrations.CreateModel(
            name='Key',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_as_id_int', models.BigIntegerField(editable=False, help_text='Copy of AS.as_id_int.')),
                ('usage', models.CharField(choices=[('sensitive-voting', 'sensitive-voting'), ('regular-voting', 'regular-voting'), ('cp-root', 'cp-root'), ('cp-ca', 'cp-ca'), ('cp-as', 'cp-as')], editable=False, max_length=32)),
                ('version', models.PositiveIntegerField(editable=False)),
                ('not_before', models.DateTimeField()),
                ('not_after', models.DateTimeField()),
                ('key', models.TextField(editable=False)),
                ('AS', models.ForeignKey(editable=False, null=True, on_delete=scionlab.models.pki._key_set_null_or_cascade, related_name='keys', to='scionlab.as')),
            ],
            options={
                'unique_together': {('AS', 'usage', 'version')},
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField()),
                ('not_before', models.DateTimeField()),
                ('not_after', models.DateTimeField()),
                ('certificate', models.TextField(editable=False)),
                ('ca_cert', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issued_certificates', to='scionlab.certificate')),
                ('key', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='scionlab.key')),
            ],
            options={
                'unique_together': {('key', 'version')},
            },
        ),
        migrations.AddField(
            model_name='borderrouter',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='border_routers', to='scionlab.host'),
        ),
        migrations.CreateModel(
            name='AttachmentPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AS', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='attachment_point_info', to='scionlab.as')),
                ('vpn', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='scionlab.vpn')),
            ],
        ),
        migrations.AddField(
            model_name='as',
            name='isd',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ases', to='scionlab.isd', verbose_name='ISD'),
        ),
        migrations.AddField(
            model_name='as',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ases', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='VPNClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField()),
                ('active', models.BooleanField(default=True)),
                ('private_key', models.TextField(blank=True, null=True)),
                ('cert', models.TextField(blank=True, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vpn_clients', to='scionlab.host')),
                ('vpn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='scionlab.vpn')),
            ],
            options={
                'verbose_name': 'VPN Client',
                'verbose_name_plural': 'VPN Clients',
                'unique_together': {('vpn', 'ip')},
            },
        ),
        migrations.CreateModel(
            name='TRC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_version', models.PositiveIntegerField(default=1, editable=False)),
                ('base_version', models.PositiveIntegerField(default=1, editable=False)),
                ('not_before', models.DateTimeField()),
                ('not_after', models.DateTimeField()),
                ('quorum', models.PositiveIntegerField(default=1)),
                ('trc', models.TextField(editable=False)),
                ('certificates', models.ManyToManyField(related_name='trc_included', to='scionlab.Certificate')),
                ('core_ases', models.ManyToManyField(related_name='trcs_attesting_core_as', to='scionlab.AS')),
                ('isd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trcs', to='scionlab.isd', verbose_name='ISD')),
                ('signatures', models.ManyToManyField(related_name='trc_signatures', to='scionlab.Certificate')),
                ('votes', models.ManyToManyField(related_name='trc_votes', to='scionlab.Certificate')),
            ],
            options={
                'verbose_name': 'TRC',
                'verbose_name_plural': 'TRCs',
                'unique_together': {('isd', 'serial_version', 'base_version')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='as',
            unique_together={('as_id',)},
        ),
    ]
